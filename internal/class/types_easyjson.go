// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package jsclass

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoInternalClass(in *jlexer.Lexer, out *GenericStringMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		if !in.IsDelim('}') {
			*out = make(GenericStringMap)
		} else {
			*out = nil
		}
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v1 string
			v1 = string(in.String())
			(*out)[key] = v1
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoInternalClass(out *jwriter.Writer, in GenericStringMap) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v2First := true
		for v2Name, v2Value := range in {
			if v2First {
				v2First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v2Name))
			out.RawByte(':')
			out.String(string(v2Value))
		}
		out.RawByte('}')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GenericStringMap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoInternalClass(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GenericStringMap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoInternalClass(l, v)
}
func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoInternalClass1(in *jlexer.Lexer, out *GenericAnyMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		if !in.IsDelim('}') {
			*out = make(GenericAnyMap)
		} else {
			*out = nil
		}
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v3 interface{}
			if m, ok := v3.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := v3.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				v3 = in.Interface()
			}
			(*out)[key] = v3
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoInternalClass1(out *jwriter.Writer, in GenericAnyMap) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v4First := true
		for v4Name, v4Value := range in {
			if v4First {
				v4First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v4Name))
			out.RawByte(':')
			if m, ok := v4Value.(easyjson.Marshaler); ok {
				m.MarshalEasyJSON(out)
			} else if m, ok := v4Value.(json.Marshaler); ok {
				out.Raw(m.MarshalJSON())
			} else {
				out.Raw(json.Marshal(v4Value))
			}
		}
		out.RawByte('}')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GenericAnyMap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoInternalClass1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GenericAnyMap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoInternalClass1(l, v)
}
