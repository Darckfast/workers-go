// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package tail

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareTail(in *jlexer.Lexer, out *Traces) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Traces, 0, 0)
			} else {
				*out = Traces{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 TraceItem
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareTail(out *jwriter.Writer, in Traces) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Traces) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareTail(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Traces) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareTail(l, v)
}
func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareTail1(in *jlexer.Lexer, out *TraceLog) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "level":
			out.Level = string(in.String())
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				in.Delim('[')
				if out.Message == nil {
					if !in.IsDelim(']') {
						out.Message = make([]interface{}, 0, 4)
					} else {
						out.Message = []interface{}{}
					}
				} else {
					out.Message = (out.Message)[:0]
				}
				for !in.IsDelim(']') {
					var v4 interface{}
					if m, ok := v4.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v4.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v4 = in.Interface()
					}
					out.Message = append(out.Message, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareTail1(out *jwriter.Writer, in TraceLog) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Timestamp != 0 {
		const prefix string = ",\"timestamp\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Timestamp))
	}
	if in.Level != "" {
		const prefix string = ",\"level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Level))
	}
	if len(in.Message) != 0 {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Message {
				if v5 > 0 {
					out.RawByte(',')
				}
				if m, ok := v6.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v6.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v6))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TraceLog) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareTail1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TraceLog) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareTail1(l, v)
}
func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareTail2(in *jlexer.Lexer, out *TraceItemTailEventInfoTailItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "scriptName":
			out.ScriptName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareTail2(out *jwriter.Writer, in TraceItemTailEventInfoTailItem) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ScriptName != "" {
		const prefix string = ",\"scriptName\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ScriptName))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TraceItemTailEventInfoTailItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareTail2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TraceItemTailEventInfoTailItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareTail2(l, v)
}
func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareTail3(in *jlexer.Lexer, out *TraceItemGetWebSocketEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "webSocketEventType":
			out.WebSocketEventType = string(in.String())
		case "code":
			out.Code = int(in.Int())
		case "wasClean":
			out.WasClean = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareTail3(out *jwriter.Writer, in TraceItemGetWebSocketEvent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.WebSocketEventType != "" {
		const prefix string = ",\"webSocketEventType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.WebSocketEventType))
	}
	if in.Code != 0 {
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	if in.WasClean {
		const prefix string = ",\"wasClean\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.WasClean))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TraceItemGetWebSocketEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareTail3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TraceItemGetWebSocketEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareTail3(l, v)
}
func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareTail4(in *jlexer.Lexer, out *TraceItemFetchEventInfoResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareTail4(out *jwriter.Writer, in TraceItemFetchEventInfoResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Status != 0 {
		const prefix string = ",\"status\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TraceItemFetchEventInfoResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareTail4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TraceItemFetchEventInfoResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareTail4(l, v)
}
func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareTail5(in *jlexer.Lexer, out *TraceItemFetchEventInfoRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cf":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Cf = make(map[string]interface{})
				} else {
					out.Cf = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v7 interface{}
					if m, ok := v7.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v7.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v7 = in.Interface()
					}
					(out.Cf)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		case "headers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Headers = make(map[string]string)
				} else {
					out.Headers = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v8 string
					v8 = string(in.String())
					(out.Headers)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		case "method":
			out.Method = string(in.String())
		case "url":
			out.Url = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareTail5(out *jwriter.Writer, in TraceItemFetchEventInfoRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Cf) != 0 {
		const prefix string = ",\"cf\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v9First := true
			for v9Name, v9Value := range in.Cf {
				if v9First {
					v9First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v9Name))
				out.RawByte(':')
				if m, ok := v9Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v9Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v9Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Headers) != 0 {
		const prefix string = ",\"headers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.Headers {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				out.String(string(v10Value))
			}
			out.RawByte('}')
		}
	}
	if in.Method != "" {
		const prefix string = ",\"method\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Method))
	}
	if in.Url != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Url))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TraceItemFetchEventInfoRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareTail5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TraceItemFetchEventInfoRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareTail5(l, v)
}
func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareTail6(in *jlexer.Lexer, out *TraceItemEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rpcMethod":
			out.RpcMethod = string(in.String())
		case "mailFrom":
			out.MailFrom = string(in.String())
		case "rcptTo":
			out.RcptTo = string(in.String())
		case "rawSize":
			out.RawSize = int(in.Int())
		case "queue":
			out.Queue = string(in.String())
		case "batchSize":
			out.BatchSize = int(in.Int())
		case "scheduledTime":
			out.ScheduledTime = int64(in.Int64())
		case "cron":
			out.Cron = string(in.String())
		case "consumedEvents":
			if in.IsNull() {
				in.Skip()
				out.ConsumedEvents = nil
			} else {
				if out.ConsumedEvents == nil {
					out.ConsumedEvents = new([]TraceItemTailEventInfoTailItem)
				}
				if in.IsNull() {
					in.Skip()
					*out.ConsumedEvents = nil
				} else {
					in.Delim('[')
					if *out.ConsumedEvents == nil {
						if !in.IsDelim(']') {
							*out.ConsumedEvents = make([]TraceItemTailEventInfoTailItem, 0, 4)
						} else {
							*out.ConsumedEvents = []TraceItemTailEventInfoTailItem{}
						}
					} else {
						*out.ConsumedEvents = (*out.ConsumedEvents)[:0]
					}
					for !in.IsDelim(']') {
						var v11 TraceItemTailEventInfoTailItem
						(v11).UnmarshalEasyJSON(in)
						*out.ConsumedEvents = append(*out.ConsumedEvents, v11)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "response":
			if in.IsNull() {
				in.Skip()
				out.Response = nil
			} else {
				if out.Response == nil {
					out.Response = new(TraceItemFetchEventInfoResponse)
				}
				(*out.Response).UnmarshalEasyJSON(in)
			}
		case "request":
			if in.IsNull() {
				in.Skip()
				out.Request = nil
			} else {
				if out.Request == nil {
					out.Request = new(TraceItemFetchEventInfoRequest)
				}
				(*out.Request).UnmarshalEasyJSON(in)
			}
		case "getWebSocketEvent":
			if in.IsNull() {
				in.Skip()
				out.GetWebSocketEvent = nil
			} else {
				if out.GetWebSocketEvent == nil {
					out.GetWebSocketEvent = new(TraceItemGetWebSocketEvent)
				}
				(*out.GetWebSocketEvent).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareTail6(out *jwriter.Writer, in TraceItemEvent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RpcMethod != "" {
		const prefix string = ",\"rpcMethod\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RpcMethod))
	}
	if in.MailFrom != "" {
		const prefix string = ",\"mailFrom\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MailFrom))
	}
	if in.RcptTo != "" {
		const prefix string = ",\"rcptTo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RcptTo))
	}
	if in.RawSize != 0 {
		const prefix string = ",\"rawSize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.RawSize))
	}
	if in.Queue != "" {
		const prefix string = ",\"queue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Queue))
	}
	if in.BatchSize != 0 {
		const prefix string = ",\"batchSize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BatchSize))
	}
	if in.ScheduledTime != 0 {
		const prefix string = ",\"scheduledTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ScheduledTime))
	}
	if in.Cron != "" {
		const prefix string = ",\"cron\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Cron))
	}
	if in.ConsumedEvents != nil {
		const prefix string = ",\"consumedEvents\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if *in.ConsumedEvents == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range *in.ConsumedEvents {
				if v12 > 0 {
					out.RawByte(',')
				}
				(v13).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Response != nil {
		const prefix string = ",\"response\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Response).MarshalEasyJSON(out)
	}
	if in.Request != nil {
		const prefix string = ",\"request\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Request).MarshalEasyJSON(out)
	}
	if in.GetWebSocketEvent != nil {
		const prefix string = ",\"getWebSocketEvent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.GetWebSocketEvent).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TraceItemEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareTail6(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TraceItemEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareTail6(l, v)
}
func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareTail7(in *jlexer.Lexer, out *TraceItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "scriptName":
			out.ScriptName = string(in.String())
		case "entrypoint":
			out.Entrypoint = string(in.String())
		case "event":
			if in.IsNull() {
				in.Skip()
				out.Event = nil
			} else {
				if out.Event == nil {
					out.Event = new(TraceItemEvent)
				}
				(*out.Event).UnmarshalEasyJSON(in)
			}
		case "eventTimestamp":
			out.EventTimeStamp = int64(in.Int64())
		case "logs":
			if in.IsNull() {
				in.Skip()
				out.Logs = nil
			} else {
				in.Delim('[')
				if out.Logs == nil {
					if !in.IsDelim(']') {
						out.Logs = make([]TraceLog, 0, 1)
					} else {
						out.Logs = []TraceLog{}
					}
				} else {
					out.Logs = (out.Logs)[:0]
				}
				for !in.IsDelim(']') {
					var v14 TraceLog
					(v14).UnmarshalEasyJSON(in)
					out.Logs = append(out.Logs, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "exceptions":
			if in.IsNull() {
				in.Skip()
				out.Exceptions = nil
			} else {
				in.Delim('[')
				if out.Exceptions == nil {
					if !in.IsDelim(']') {
						out.Exceptions = make([]TraceException, 0, 1)
					} else {
						out.Exceptions = []TraceException{}
					}
				} else {
					out.Exceptions = (out.Exceptions)[:0]
				}
				for !in.IsDelim(']') {
					var v15 TraceException
					(v15).UnmarshalEasyJSON(in)
					out.Exceptions = append(out.Exceptions, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "diagnosticsChannelEvents":
			if in.IsNull() {
				in.Skip()
				out.DiagnosticsChannelEvents = nil
			} else {
				in.Delim('[')
				if out.DiagnosticsChannelEvents == nil {
					if !in.IsDelim(']') {
						out.DiagnosticsChannelEvents = make([]TraceDiagnosticeChannelEvent, 0, 1)
					} else {
						out.DiagnosticsChannelEvents = []TraceDiagnosticeChannelEvent{}
					}
				} else {
					out.DiagnosticsChannelEvents = (out.DiagnosticsChannelEvents)[:0]
				}
				for !in.IsDelim(']') {
					var v16 TraceDiagnosticeChannelEvent
					(v16).UnmarshalEasyJSON(in)
					out.DiagnosticsChannelEvents = append(out.DiagnosticsChannelEvents, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "outcome":
			out.Outcome = string(in.String())
		case "truncated":
			out.Truncated = bool(in.Bool())
		case "cpuTime":
			out.CpuTime = int64(in.Int64())
		case "wallTime":
			out.WallTime = int64(in.Int64())
		case "executionModel":
			out.ExecutionModel = string(in.String())
		case "scriptTags":
			if in.IsNull() {
				in.Skip()
				out.ScriptTags = nil
			} else {
				in.Delim('[')
				if out.ScriptTags == nil {
					if !in.IsDelim(']') {
						out.ScriptTags = make([]string, 0, 4)
					} else {
						out.ScriptTags = []string{}
					}
				} else {
					out.ScriptTags = (out.ScriptTags)[:0]
				}
				for !in.IsDelim(']') {
					var v17 string
					v17 = string(in.String())
					out.ScriptTags = append(out.ScriptTags, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "dispatchNamespace":
			out.DispatchNamespace = string(in.String())
		case "scriptVersion":
			if in.IsNull() {
				in.Skip()
				out.ScriptVersion = nil
			} else {
				if out.ScriptVersion == nil {
					out.ScriptVersion = new(ScriptVersion)
				}
				(*out.ScriptVersion).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareTail7(out *jwriter.Writer, in TraceItem) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ScriptName != "" {
		const prefix string = ",\"scriptName\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ScriptName))
	}
	if in.Entrypoint != "" {
		const prefix string = ",\"entrypoint\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Entrypoint))
	}
	if in.Event != nil {
		const prefix string = ",\"event\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Event).MarshalEasyJSON(out)
	}
	if in.EventTimeStamp != 0 {
		const prefix string = ",\"eventTimestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EventTimeStamp))
	}
	if len(in.Logs) != 0 {
		const prefix string = ",\"logs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v18, v19 := range in.Logs {
				if v18 > 0 {
					out.RawByte(',')
				}
				(v19).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Exceptions) != 0 {
		const prefix string = ",\"exceptions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.Exceptions {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.DiagnosticsChannelEvents) != 0 {
		const prefix string = ",\"diagnosticsChannelEvents\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v22, v23 := range in.DiagnosticsChannelEvents {
				if v22 > 0 {
					out.RawByte(',')
				}
				(v23).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Outcome != "" {
		const prefix string = ",\"outcome\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Outcome))
	}
	if in.Truncated {
		const prefix string = ",\"truncated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Truncated))
	}
	if in.CpuTime != 0 {
		const prefix string = ",\"cpuTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.CpuTime))
	}
	if in.WallTime != 0 {
		const prefix string = ",\"wallTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WallTime))
	}
	if in.ExecutionModel != "" {
		const prefix string = ",\"executionModel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExecutionModel))
	}
	if len(in.ScriptTags) != 0 {
		const prefix string = ",\"scriptTags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v24, v25 := range in.ScriptTags {
				if v24 > 0 {
					out.RawByte(',')
				}
				out.String(string(v25))
			}
			out.RawByte(']')
		}
	}
	if in.DispatchNamespace != "" {
		const prefix string = ",\"dispatchNamespace\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DispatchNamespace))
	}
	if in.ScriptVersion != nil {
		const prefix string = ",\"scriptVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ScriptVersion).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TraceItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareTail7(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TraceItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareTail7(l, v)
}
func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareTail8(in *jlexer.Lexer, out *TraceException) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "message":
			out.Message = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "stack":
			out.Stack = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareTail8(out *jwriter.Writer, in TraceException) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Timestamp != 0 {
		const prefix string = ",\"timestamp\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Timestamp))
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Stack != "" {
		const prefix string = ",\"stack\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Stack))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TraceException) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareTail8(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TraceException) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareTail8(l, v)
}
func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareTail9(in *jlexer.Lexer, out *TraceDiagnosticeChannelEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "channel":
			out.Channel = string(in.String())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareTail9(out *jwriter.Writer, in TraceDiagnosticeChannelEvent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Timestamp != 0 {
		const prefix string = ",\"timestamp\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Timestamp))
	}
	if in.Channel != "" {
		const prefix string = ",\"channel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Channel))
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TraceDiagnosticeChannelEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareTail9(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TraceDiagnosticeChannelEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareTail9(l, v)
}
func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareTail10(in *jlexer.Lexer, out *ScriptVersion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "tag":
			out.Tag = string(in.String())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareTail10(out *jwriter.Writer, in ScriptVersion) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	if in.Tag != "" {
		const prefix string = ",\"tag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tag))
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScriptVersion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareTail10(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScriptVersion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareTail10(l, v)
}
