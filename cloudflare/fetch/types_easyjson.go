// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package fetch

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareFetch(in *jlexer.Lexer, out *RequestInitCF) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apps":
			out.Apps = bool(in.Bool())
		case "cacheEverything":
			out.CacheEverything = bool(in.Bool())
		case "cacheKey":
			out.CacheKey = string(in.String())
		case "cacheTags":
			if in.IsNull() {
				in.Skip()
				out.CacheTags = nil
			} else {
				in.Delim('[')
				if out.CacheTags == nil {
					if !in.IsDelim(']') {
						out.CacheTags = make([]string, 0, 4)
					} else {
						out.CacheTags = []string{}
					}
				} else {
					out.CacheTags = (out.CacheTags)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.CacheTags = append(out.CacheTags, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cacheTtl":
			out.CacheTtl = int(in.Int())
		case "cacheTtlByStatus":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.CacheTtlByStatus = make(map[string]int)
				} else {
					out.CacheTtlByStatus = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 int
					v2 = int(in.Int())
					(out.CacheTtlByStatus)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "mirage":
			out.Mirage = bool(in.Bool())
		case "polish":
			out.Polish = string(in.String())
		case "resolveOverride":
			out.ResolveOverride = string(in.String())
		case "scrapShield":
			out.ScrapShield = bool(in.Bool())
		case "webp":
			out.Webp = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareFetch(out *jwriter.Writer, in RequestInitCF) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Apps {
		const prefix string = ",\"apps\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.Apps))
	}
	if in.CacheEverything {
		const prefix string = ",\"cacheEverything\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CacheEverything))
	}
	if in.CacheKey != "" {
		const prefix string = ",\"cacheKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CacheKey))
	}
	if len(in.CacheTags) != 0 {
		const prefix string = ",\"cacheTags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v3, v4 := range in.CacheTags {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	if in.CacheTtl != 0 {
		const prefix string = ",\"cacheTtl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CacheTtl))
	}
	if len(in.CacheTtlByStatus) != 0 {
		const prefix string = ",\"cacheTtlByStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.CacheTtlByStatus {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				out.Int(int(v5Value))
			}
			out.RawByte('}')
		}
	}
	if in.Mirage {
		const prefix string = ",\"mirage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Mirage))
	}
	if in.Polish != "" {
		const prefix string = ",\"polish\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Polish))
	}
	if in.ResolveOverride != "" {
		const prefix string = ",\"resolveOverride\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResolveOverride))
	}
	if in.ScrapShield {
		const prefix string = ",\"scrapShield\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ScrapShield))
	}
	if in.Webp {
		const prefix string = ",\"webp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Webp))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RequestInitCF) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareFetch(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RequestInitCF) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareFetch(l, v)
}
func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareFetch1(in *jlexer.Lexer, out *InitOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "redirect":
			out.Redirect = string(in.String())
		case "credentials":
			out.Credentials = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareFetch1(out *jwriter.Writer, in InitOptions) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Redirect != "" {
		const prefix string = ",\"redirect\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Redirect))
	}
	if in.Credentials != "" {
		const prefix string = ",\"credentials\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Credentials))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InitOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareFetch1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InitOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareFetch1(l, v)
}
