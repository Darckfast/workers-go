// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package r2

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	http "net/http"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareR2(in *jlexer.Lexer, out *UploadedPart) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "etag":
			out.ETag = string(in.String())
		case "partNumber":
			out.PartNumber = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareR2(out *jwriter.Writer, in UploadedPart) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ETag != "" {
		const prefix string = ",\"etag\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ETag))
	}
	if in.PartNumber != 0 {
		const prefix string = ",\"partNumber\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PartNumber))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UploadedPart) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareR2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UploadedPart) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareR2(l, v)
}
func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareR21(in *jlexer.Lexer, out *R2Objects) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "objects":
			if in.IsNull() {
				in.Skip()
				out.Objects = nil
			} else {
				in.Delim('[')
				if out.Objects == nil {
					if !in.IsDelim(']') {
						out.Objects = make([]*R2Object, 0, 8)
					} else {
						out.Objects = []*R2Object{}
					}
				} else {
					out.Objects = (out.Objects)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *R2Object
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(R2Object)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Objects = append(out.Objects, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "truncated":
			out.Truncated = bool(in.Bool())
		case "cursor":
			out.Cursor = string(in.String())
		case "delimitedPrefixes":
			if in.IsNull() {
				in.Skip()
				out.DelimitedPrefixes = nil
			} else {
				in.Delim('[')
				if out.DelimitedPrefixes == nil {
					if !in.IsDelim(']') {
						out.DelimitedPrefixes = make([]string, 0, 4)
					} else {
						out.DelimitedPrefixes = []string{}
					}
				} else {
					out.DelimitedPrefixes = (out.DelimitedPrefixes)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.DelimitedPrefixes = append(out.DelimitedPrefixes, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareR21(out *jwriter.Writer, in R2Objects) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Objects) != 0 {
		const prefix string = ",\"objects\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v3, v4 := range in.Objects {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil {
					out.RawString("null")
				} else {
					(*v4).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Truncated {
		const prefix string = ",\"truncated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Truncated))
	}
	if in.Cursor != "" {
		const prefix string = ",\"cursor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Cursor))
	}
	if len(in.DelimitedPrefixes) != 0 {
		const prefix string = ",\"delimitedPrefixes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.DelimitedPrefixes {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v R2Objects) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareR21(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *R2Objects) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareR21(l, v)
}
func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareR22(in *jlexer.Lexer, out *R2Object) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "size":
			out.Size = int(in.Int())
		case "etag":
			out.ETag = string(in.String())
		case "httpEtag":
			out.HTTPETag = string(in.String())
		case "uploaded":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Uploaded).UnmarshalJSON(data))
			}
		case "httpMetadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.HTTPMetadata = make(map[string]string)
				} else {
					out.HTTPMetadata = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v7 string
					v7 = string(in.String())
					(out.HTTPMetadata)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		case "customMetadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.CustomMetadata = make(map[string]string)
				} else {
					out.CustomMetadata = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v8 string
					v8 = string(in.String())
					(out.CustomMetadata)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareR22(out *jwriter.Writer, in R2Object) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Key != "" {
		const prefix string = ",\"key\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Size))
	}
	if in.ETag != "" {
		const prefix string = ",\"etag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ETag))
	}
	if in.HTTPETag != "" {
		const prefix string = ",\"httpEtag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HTTPETag))
	}
	if true {
		const prefix string = ",\"uploaded\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Uploaded).MarshalJSON())
	}
	if len(in.HTTPMetadata) != 0 {
		const prefix string = ",\"httpMetadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v9First := true
			for v9Name, v9Value := range in.HTTPMetadata {
				if v9First {
					v9First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v9Name))
				out.RawByte(':')
				out.String(string(v9Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.CustomMetadata) != 0 {
		const prefix string = ",\"customMetadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.CustomMetadata {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				out.String(string(v10Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v R2Object) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareR22(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *R2Object) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareR22(l, v)
}
func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareR23(in *jlexer.Lexer, out *R2Conditional) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "etagMatches":
			out.EtagMatches = string(in.String())
		case "etagDoesNotMatch":
			out.EtagDoesNotMatch = string(in.String())
		case "uploadedBefore":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UploadedBefore).UnmarshalJSON(data))
			}
		case "uploadedAfter":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UploadedAfter).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareR23(out *jwriter.Writer, in R2Conditional) {
	out.RawByte('{')
	first := true
	_ = first
	if in.EtagMatches != "" {
		const prefix string = ",\"etagMatches\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.EtagMatches))
	}
	if in.EtagDoesNotMatch != "" {
		const prefix string = ",\"etagDoesNotMatch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EtagDoesNotMatch))
	}
	if true {
		const prefix string = ",\"uploadedBefore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.UploadedBefore).MarshalJSON())
	}
	if true {
		const prefix string = ",\"uploadedAfter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.UploadedAfter).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v R2Conditional) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareR23(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *R2Conditional) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareR23(l, v)
}
func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareR24(in *jlexer.Lexer, out *PutOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "onlyIf":
			if in.IsNull() {
				in.Skip()
				out.OnlyIf = nil
			} else {
				if out.OnlyIf == nil {
					out.OnlyIf = new(R2Conditional)
				}
				(*out.OnlyIf).UnmarshalEasyJSON(in)
			}
		case "httpMetadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.HTTPMetadata = make(http.Header)
				} else {
					out.HTTPMetadata = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v11 []string
					if in.IsNull() {
						in.Skip()
						v11 = nil
					} else {
						in.Delim('[')
						if v11 == nil {
							if !in.IsDelim(']') {
								v11 = make([]string, 0, 4)
							} else {
								v11 = []string{}
							}
						} else {
							v11 = (v11)[:0]
						}
						for !in.IsDelim(']') {
							var v12 string
							v12 = string(in.String())
							v11 = append(v11, v12)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.HTTPMetadata)[key] = v11
					in.WantComma()
				}
				in.Delim('}')
			}
		case "customMetadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.CustomMetadata = make(map[string]string)
				} else {
					out.CustomMetadata = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v13 string
					v13 = string(in.String())
					(out.CustomMetadata)[key] = v13
					in.WantComma()
				}
				in.Delim('}')
			}
		case "md5":
			out.MD5 = string(in.String())
		case "sha1":
			out.SHA1 = string(in.String())
		case "sha256":
			out.SHA256 = string(in.String())
		case "sha384":
			out.SHA384 = string(in.String())
		case "sha512":
			out.SHA512 = string(in.String())
		case "storageClass":
			out.StorageClass = string(in.String())
		case "ssecKey":
			out.SSecKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareR24(out *jwriter.Writer, in PutOptions) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OnlyIf != nil {
		const prefix string = ",\"onlyIf\":"
		first = false
		out.RawString(prefix[1:])
		(*in.OnlyIf).MarshalEasyJSON(out)
	}
	if len(in.HTTPMetadata) != 0 {
		const prefix string = ",\"httpMetadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v14First := true
			for v14Name, v14Value := range in.HTTPMetadata {
				if v14First {
					v14First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v14Name))
				out.RawByte(':')
				if v14Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v15, v16 := range v14Value {
						if v15 > 0 {
							out.RawByte(',')
						}
						out.String(string(v16))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.CustomMetadata) != 0 {
		const prefix string = ",\"customMetadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v17First := true
			for v17Name, v17Value := range in.CustomMetadata {
				if v17First {
					v17First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v17Name))
				out.RawByte(':')
				out.String(string(v17Value))
			}
			out.RawByte('}')
		}
	}
	if in.MD5 != "" {
		const prefix string = ",\"md5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MD5))
	}
	if in.SHA1 != "" {
		const prefix string = ",\"sha1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SHA1))
	}
	if in.SHA256 != "" {
		const prefix string = ",\"sha256\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SHA256))
	}
	if in.SHA384 != "" {
		const prefix string = ",\"sha384\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SHA384))
	}
	if in.SHA512 != "" {
		const prefix string = ",\"sha512\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SHA512))
	}
	if in.StorageClass != "" {
		const prefix string = ",\"storageClass\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StorageClass))
	}
	if in.SSecKey != "" {
		const prefix string = ",\"ssecKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SSecKey))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PutOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareR24(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PutOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareR24(l, v)
}
func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareR25(in *jlexer.Lexer, out *MultipartOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "httpMetadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.HTTPMetadata = make(http.Header)
				} else {
					out.HTTPMetadata = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v18 []string
					if in.IsNull() {
						in.Skip()
						v18 = nil
					} else {
						in.Delim('[')
						if v18 == nil {
							if !in.IsDelim(']') {
								v18 = make([]string, 0, 4)
							} else {
								v18 = []string{}
							}
						} else {
							v18 = (v18)[:0]
						}
						for !in.IsDelim(']') {
							var v19 string
							v19 = string(in.String())
							v18 = append(v18, v19)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.HTTPMetadata)[key] = v18
					in.WantComma()
				}
				in.Delim('}')
			}
		case "customMetadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.CustomMetadata = make(map[string]string)
				} else {
					out.CustomMetadata = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v20 string
					v20 = string(in.String())
					(out.CustomMetadata)[key] = v20
					in.WantComma()
				}
				in.Delim('}')
			}
		case "storageClass":
			out.StorageClass = string(in.String())
		case "ssecKey":
			out.SSecKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareR25(out *jwriter.Writer, in MultipartOptions) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.HTTPMetadata) != 0 {
		const prefix string = ",\"httpMetadata\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v21First := true
			for v21Name, v21Value := range in.HTTPMetadata {
				if v21First {
					v21First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v21Name))
				out.RawByte(':')
				if v21Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v22, v23 := range v21Value {
						if v22 > 0 {
							out.RawByte(',')
						}
						out.String(string(v23))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.CustomMetadata) != 0 {
		const prefix string = ",\"customMetadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v24First := true
			for v24Name, v24Value := range in.CustomMetadata {
				if v24First {
					v24First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v24Name))
				out.RawByte(':')
				out.String(string(v24Value))
			}
			out.RawByte('}')
		}
	}
	if in.StorageClass != "" {
		const prefix string = ",\"storageClass\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StorageClass))
	}
	if in.SSecKey != "" {
		const prefix string = ",\"ssecKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SSecKey))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MultipartOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareR25(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MultipartOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareR25(l, v)
}
func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareR26(in *jlexer.Lexer, out *ListOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "limit":
			out.Limit = int64(in.Int64())
		case "prefix":
			out.Prefix = string(in.String())
		case "cursor":
			out.Cursor = string(in.String())
		case "delimiter":
			out.Delimiter = string(in.String())
		case "include":
			if in.IsNull() {
				in.Skip()
				out.Include = nil
			} else {
				in.Delim('[')
				if out.Include == nil {
					if !in.IsDelim(']') {
						out.Include = make([]string, 0, 4)
					} else {
						out.Include = []string{}
					}
				} else {
					out.Include = (out.Include)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.Include = append(out.Include, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareR26(out *jwriter.Writer, in ListOptions) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Limit != 0 {
		const prefix string = ",\"limit\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Limit))
	}
	if in.Prefix != "" {
		const prefix string = ",\"prefix\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Prefix))
	}
	if in.Cursor != "" {
		const prefix string = ",\"cursor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Cursor))
	}
	if in.Delimiter != "" {
		const prefix string = ",\"delimiter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Delimiter))
	}
	if len(in.Include) != 0 {
		const prefix string = ",\"include\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.Include {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.String(string(v27))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareR26(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareR26(l, v)
}
func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareR27(in *jlexer.Lexer, out *GetOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "onlyIf":
			if in.IsNull() {
				in.Skip()
				out.OnlyIf = nil
			} else {
				if out.OnlyIf == nil {
					out.OnlyIf = new(R2Conditional)
				}
				(*out.OnlyIf).UnmarshalEasyJSON(in)
			}
		case "range":
			if in.IsNull() {
				in.Skip()
				out.Range = nil
			} else {
				if out.Range == nil {
					out.Range = new(R2Range)
				}
				easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareR28(in, out.Range)
			}
		case "ssecKey":
			out.SSecKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareR27(out *jwriter.Writer, in GetOptions) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OnlyIf != nil {
		const prefix string = ",\"onlyIf\":"
		first = false
		out.RawString(prefix[1:])
		(*in.OnlyIf).MarshalEasyJSON(out)
	}
	if in.Range != nil {
		const prefix string = ",\"range\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareR28(out, *in.Range)
	}
	if in.SSecKey != "" {
		const prefix string = ",\"ssecKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SSecKey))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareR27(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareR27(l, v)
}
func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareR28(in *jlexer.Lexer, out *R2Range) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "offset":
			out.Offset = int64(in.Int64())
		case "length":
			out.Length = int64(in.Int64())
		case "suffix":
			out.Suffix = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareR28(out *jwriter.Writer, in R2Range) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Offset != 0 {
		const prefix string = ",\"offset\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Offset))
	}
	if in.Length != 0 {
		const prefix string = ",\"length\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Length))
	}
	if in.Suffix != 0 {
		const prefix string = ",\"suffix\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Suffix))
	}
	out.RawByte('}')
}
