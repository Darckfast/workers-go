// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package d1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareD1V2(in *jlexer.Lexer, out *D1Result) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "success":
			out.Success = bool(in.Bool())
		case "results":
			if in.IsNull() {
				in.Skip()
				out.Results = nil
			} else {
				in.Delim('[')
				if out.Results == nil {
					if !in.IsDelim(']') {
						out.Results = make([]interface{}, 0, 4)
					} else {
						out.Results = []interface{}{}
					}
				} else {
					out.Results = (out.Results)[:0]
				}
				for !in.IsDelim(']') {
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					out.Results = append(out.Results, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta":
			easyjson6601e8cdDecode(in, &out.Meta)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareD1V2(out *jwriter.Writer, in D1Result) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Success {
		const prefix string = ",\"success\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.Success))
	}
	if len(in.Results) != 0 {
		const prefix string = ",\"results\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Results {
				if v2 > 0 {
					out.RawByte(',')
				}
				if m, ok := v3.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v3.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v3))
				}
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"meta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncode(out, in.Meta)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v D1Result) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareD1V2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *D1Result) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareD1V2(l, v)
}
func easyjson6601e8cdDecode(in *jlexer.Lexer, out *struct {
	ServedBy        string `json:"served_by"`
	ServedByRegion  string `json:"served_by_region"`
	ServedByPrimary bool   `json:"served_by_primary"`
	Timings         struct {
		SqlDurationMs int64 `json:"sql_duration_ms"`
	} `json:"timings"`
	Duration    int64 `json:"duration"`
	Changes     int64 `json:"changes"`
	LastRowId   int64 `json:"last_row_id"`
	ChangedDb   bool  `json:"changed_db"`
	SizeAfter   int64 `json:"size_after"`
	RowsRead    int64 `json:"rows_read"`
	RowsWritten int64 `json:"rows_written"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "served_by":
			out.ServedBy = string(in.String())
		case "served_by_region":
			out.ServedByRegion = string(in.String())
		case "served_by_primary":
			out.ServedByPrimary = bool(in.Bool())
		case "timings":
			easyjson6601e8cdDecode1(in, &out.Timings)
		case "duration":
			out.Duration = int64(in.Int64())
		case "changes":
			out.Changes = int64(in.Int64())
		case "last_row_id":
			out.LastRowId = int64(in.Int64())
		case "changed_db":
			out.ChangedDb = bool(in.Bool())
		case "size_after":
			out.SizeAfter = int64(in.Int64())
		case "rows_read":
			out.RowsRead = int64(in.Int64())
		case "rows_written":
			out.RowsWritten = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode(out *jwriter.Writer, in struct {
	ServedBy        string `json:"served_by"`
	ServedByRegion  string `json:"served_by_region"`
	ServedByPrimary bool   `json:"served_by_primary"`
	Timings         struct {
		SqlDurationMs int64 `json:"sql_duration_ms"`
	} `json:"timings"`
	Duration    int64 `json:"duration"`
	Changes     int64 `json:"changes"`
	LastRowId   int64 `json:"last_row_id"`
	ChangedDb   bool  `json:"changed_db"`
	SizeAfter   int64 `json:"size_after"`
	RowsRead    int64 `json:"rows_read"`
	RowsWritten int64 `json:"rows_written"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ServedBy != "" {
		const prefix string = ",\"served_by\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ServedBy))
	}
	if in.ServedByRegion != "" {
		const prefix string = ",\"served_by_region\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ServedByRegion))
	}
	if in.ServedByPrimary {
		const prefix string = ",\"served_by_primary\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ServedByPrimary))
	}
	if true {
		const prefix string = ",\"timings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncode1(out, in.Timings)
	}
	if in.Duration != 0 {
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Duration))
	}
	if in.Changes != 0 {
		const prefix string = ",\"changes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Changes))
	}
	if in.LastRowId != 0 {
		const prefix string = ",\"last_row_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LastRowId))
	}
	if in.ChangedDb {
		const prefix string = ",\"changed_db\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ChangedDb))
	}
	if in.SizeAfter != 0 {
		const prefix string = ",\"size_after\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SizeAfter))
	}
	if in.RowsRead != 0 {
		const prefix string = ",\"rows_read\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.RowsRead))
	}
	if in.RowsWritten != 0 {
		const prefix string = ",\"rows_written\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.RowsWritten))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecode1(in *jlexer.Lexer, out *struct {
	SqlDurationMs int64 `json:"sql_duration_ms"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sql_duration_ms":
			out.SqlDurationMs = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode1(out *jwriter.Writer, in struct {
	SqlDurationMs int64 `json:"sql_duration_ms"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SqlDurationMs != 0 {
		const prefix string = ",\"sql_duration_ms\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.SqlDurationMs))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareD1V21(in *jlexer.Lexer, out *D1RawResults) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(D1RawResults, 0, 8)
			} else {
				*out = D1RawResults{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 map[string]interface{}
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					v4 = make(map[string]interface{})
				} else {
					v4 = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 interface{}
					if m, ok := v5.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v5.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v5 = in.Interface()
					}
					(v4)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareD1V21(out *jwriter.Writer, in D1RawResults) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v6, v7 := range in {
			if v6 > 0 {
				out.RawByte(',')
			}
			if v7 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v8First := true
				for v8Name, v8Value := range v7 {
					if v8First {
						v8First = false
					} else {
						out.RawByte(',')
					}
					out.String(string(v8Name))
					out.RawByte(':')
					if m, ok := v8Value.(easyjson.Marshaler); ok {
						m.MarshalEasyJSON(out)
					} else if m, ok := v8Value.(json.Marshaler); ok {
						out.Raw(m.MarshalJSON())
					} else {
						out.Raw(json.Marshal(v8Value))
					}
				}
				out.RawByte('}')
			}
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v D1RawResults) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareD1V21(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *D1RawResults) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareD1V21(l, v)
}
func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareD1V22(in *jlexer.Lexer, out *D1FirstResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		if !in.IsDelim('}') {
			*out = make(D1FirstResult)
		} else {
			*out = nil
		}
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v9 interface{}
			if m, ok := v9.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := v9.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				v9 = in.Interface()
			}
			(*out)[key] = v9
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareD1V22(out *jwriter.Writer, in D1FirstResult) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v10First := true
		for v10Name, v10Value := range in {
			if v10First {
				v10First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v10Name))
			out.RawByte(':')
			if m, ok := v10Value.(easyjson.Marshaler); ok {
				m.MarshalEasyJSON(out)
			} else if m, ok := v10Value.(json.Marshaler); ok {
				out.Raw(m.MarshalJSON())
			} else {
				out.Raw(json.Marshal(v10Value))
			}
		}
		out.RawByte('}')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v D1FirstResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareD1V22(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *D1FirstResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareD1V22(l, v)
}
func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareD1V23(in *jlexer.Lexer, out *D1ExecResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "duration":
			out.Duration = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareD1V23(out *jwriter.Writer, in D1ExecResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Count != 0 {
		const prefix string = ",\"count\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Count))
	}
	if in.Duration != 0 {
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Duration))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v D1ExecResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareD1V23(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *D1ExecResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareD1V23(l, v)
}
func easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareD1V24(in *jlexer.Lexer, out *D1BatchResults) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(D1BatchResults, 0, 0)
			} else {
				*out = D1BatchResults{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v11 D1Result
			(v11).UnmarshalEasyJSON(in)
			*out = append(*out, v11)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareD1V24(out *jwriter.Writer, in D1BatchResults) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v12, v13 := range in {
			if v12 > 0 {
				out.RawByte(',')
			}
			(v13).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v D1BatchResults) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComDarckfastWorkersGoCloudflareD1V24(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *D1BatchResults) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComDarckfastWorkersGoCloudflareD1V24(l, v)
}
