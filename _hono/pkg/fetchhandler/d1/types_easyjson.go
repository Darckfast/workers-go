// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package httpd1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeWorkerPkgFetchhandlerD1(in *jlexer.Lexer, out *Messages) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Messages, 0, 0)
			} else {
				*out = Messages{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Message
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeWorkerPkgFetchhandlerD1(out *jwriter.Writer, in Messages) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Messages) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeWorkerPkgFetchhandlerD1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Messages) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeWorkerPkgFetchhandlerD1(l, v)
}
func easyjson6601e8cdDecodeWorkerPkgFetchhandlerD11(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = int(in.Int())
		case "content":
			out.Content = string(in.UnsafeString())
		case "mentions":
			if in.IsNull() {
				in.Skip()
				out.Mentions = nil
			} else {
				in.Delim('[')
				if out.Mentions == nil {
					if !in.IsDelim(']') {
						out.Mentions = make([]interface{}, 0, 4)
					} else {
						out.Mentions = []interface{}{}
					}
				} else {
					out.Mentions = (out.Mentions)[:0]
				}
				for !in.IsDelim(']') {
					var v4 interface{}
					if m, ok := v4.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v4.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v4 = in.Interface()
					}
					out.Mentions = append(out.Mentions, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mention_roles":
			if in.IsNull() {
				in.Skip()
				out.MentionRoles = nil
			} else {
				in.Delim('[')
				if out.MentionRoles == nil {
					if !in.IsDelim(']') {
						out.MentionRoles = make([]interface{}, 0, 4)
					} else {
						out.MentionRoles = []interface{}{}
					}
				} else {
					out.MentionRoles = (out.MentionRoles)[:0]
				}
				for !in.IsDelim(']') {
					var v5 interface{}
					if m, ok := v5.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v5.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v5 = in.Interface()
					}
					out.MentionRoles = append(out.MentionRoles, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]interface{}, 0, 4)
					} else {
						out.Attachments = []interface{}{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v6 interface{}
					if m, ok := v6.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v6.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v6 = in.Interface()
					}
					out.Attachments = append(out.Attachments, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "embeds":
			if in.IsNull() {
				in.Skip()
				out.Embeds = nil
			} else {
				in.Delim('[')
				if out.Embeds == nil {
					if !in.IsDelim(']') {
						out.Embeds = make([]struct {
							Type        string `json:"type,nocopy"`
							Title       string `json:"title,nocopy"`
							Description string `json:"description,nocopy"`
							Color       int    `json:"color"`
							Image       struct {
								URL      string `json:"url,nocopy"`
								ProxyURL string `json:"proxy_url,nocopy"`
								Width    int    `json:"width"`
								Height   int    `json:"height"`
								Flags    int    `json:"flags"`
							} `json:"image"`
							Thumbnail struct {
								URL      string `json:"url,nocopy"`
								ProxyURL string `json:"proxy_url,nocopy"`
								Width    int    `json:"width"`
								Height   int    `json:"height"`
								Flags    int    `json:"flags"`
							} `json:"thumbnail"`
							Footer struct {
								Text string `json:"text,nocopy"`
							} `json:"footer"`
							ContentScanVersion int `json:"content_scan_version"`
						}, 0, 0)
					} else {
						out.Embeds = []struct {
							Type        string `json:"type,nocopy"`
							Title       string `json:"title,nocopy"`
							Description string `json:"description,nocopy"`
							Color       int    `json:"color"`
							Image       struct {
								URL      string `json:"url,nocopy"`
								ProxyURL string `json:"proxy_url,nocopy"`
								Width    int    `json:"width"`
								Height   int    `json:"height"`
								Flags    int    `json:"flags"`
							} `json:"image"`
							Thumbnail struct {
								URL      string `json:"url,nocopy"`
								ProxyURL string `json:"proxy_url,nocopy"`
								Width    int    `json:"width"`
								Height   int    `json:"height"`
								Flags    int    `json:"flags"`
							} `json:"thumbnail"`
							Footer struct {
								Text string `json:"text,nocopy"`
							} `json:"footer"`
							ContentScanVersion int `json:"content_scan_version"`
						}{}
					}
				} else {
					out.Embeds = (out.Embeds)[:0]
				}
				for !in.IsDelim(']') {
					var v7 struct {
						Type        string `json:"type,nocopy"`
						Title       string `json:"title,nocopy"`
						Description string `json:"description,nocopy"`
						Color       int    `json:"color"`
						Image       struct {
							URL      string `json:"url,nocopy"`
							ProxyURL string `json:"proxy_url,nocopy"`
							Width    int    `json:"width"`
							Height   int    `json:"height"`
							Flags    int    `json:"flags"`
						} `json:"image"`
						Thumbnail struct {
							URL      string `json:"url,nocopy"`
							ProxyURL string `json:"proxy_url,nocopy"`
							Width    int    `json:"width"`
							Height   int    `json:"height"`
							Flags    int    `json:"flags"`
						} `json:"thumbnail"`
						Footer struct {
							Text string `json:"text,nocopy"`
						} `json:"footer"`
						ContentScanVersion int `json:"content_scan_version"`
					}
					easyjson6601e8cdDecode(in, &v7)
					out.Embeds = append(out.Embeds, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "timestamp":
			out.Timestamp = string(in.UnsafeString())
		case "edited_timestamp":
			out.EditedTimestamp = string(in.UnsafeString())
		case "flags":
			out.Flags = int(in.Int())
		case "components":
			if in.IsNull() {
				in.Skip()
				out.Components = nil
			} else {
				in.Delim('[')
				if out.Components == nil {
					if !in.IsDelim(']') {
						out.Components = make([]interface{}, 0, 4)
					} else {
						out.Components = []interface{}{}
					}
				} else {
					out.Components = (out.Components)[:0]
				}
				for !in.IsDelim(']') {
					var v8 interface{}
					if m, ok := v8.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v8.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v8 = in.Interface()
					}
					out.Components = append(out.Components, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			out.ID = string(in.UnsafeString())
		case "channel_id":
			out.ChannelID = string(in.UnsafeString())
		case "author":
			easyjson6601e8cdDecode1(in, &out.Author)
		case "pinned":
			out.Pinned = bool(in.Bool())
		case "mention_everyone":
			out.MentionEveryone = bool(in.Bool())
		case "tts":
			out.Tts = bool(in.Bool())
		case "reactions":
			if in.IsNull() {
				in.Skip()
				out.Reactions = nil
			} else {
				in.Delim('[')
				if out.Reactions == nil {
					if !in.IsDelim(']') {
						out.Reactions = make([]struct {
							Emoji struct {
								ID   string `json:"id,nocopy"`
								Name string `json:"name,nocopy"`
							} `json:"emoji"`
							Count        int `json:"count"`
							CountDetails struct {
								Burst  int `json:"burst"`
								Normal int `json:"normal"`
							} `json:"count_details"`
							BurstColors []interface{} `json:"burst_colors"`
							MeBurst     bool          `json:"me_burst"`
							BurstMe     bool          `json:"burst_me"`
							Me          bool          `json:"me"`
							BurstCount  int           `json:"burst_count"`
						}, 0, 0)
					} else {
						out.Reactions = []struct {
							Emoji struct {
								ID   string `json:"id,nocopy"`
								Name string `json:"name,nocopy"`
							} `json:"emoji"`
							Count        int `json:"count"`
							CountDetails struct {
								Burst  int `json:"burst"`
								Normal int `json:"normal"`
							} `json:"count_details"`
							BurstColors []interface{} `json:"burst_colors"`
							MeBurst     bool          `json:"me_burst"`
							BurstMe     bool          `json:"burst_me"`
							Me          bool          `json:"me"`
							BurstCount  int           `json:"burst_count"`
						}{}
					}
				} else {
					out.Reactions = (out.Reactions)[:0]
				}
				for !in.IsDelim(']') {
					var v9 struct {
						Emoji struct {
							ID   string `json:"id,nocopy"`
							Name string `json:"name,nocopy"`
						} `json:"emoji"`
						Count        int `json:"count"`
						CountDetails struct {
							Burst  int `json:"burst"`
							Normal int `json:"normal"`
						} `json:"count_details"`
						BurstColors []interface{} `json:"burst_colors"`
						MeBurst     bool          `json:"me_burst"`
						BurstMe     bool          `json:"burst_me"`
						Me          bool          `json:"me"`
						BurstCount  int           `json:"burst_count"`
					}
					easyjson6601e8cdDecode2(in, &v9)
					out.Reactions = append(out.Reactions, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "channel_name":
			out.ChannelName = string(in.UnsafeString())
		case "is_bot":
			out.IsBot = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeWorkerPkgFetchhandlerD11(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != 0 {
		const prefix string = ",\"type\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	if in.Content != "" {
		const prefix string = ",\"content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Content))
	}
	if len(in.Mentions) != 0 {
		const prefix string = ",\"mentions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v10, v11 := range in.Mentions {
				if v10 > 0 {
					out.RawByte(',')
				}
				if m, ok := v11.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v11.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v11))
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.MentionRoles) != 0 {
		const prefix string = ",\"mention_roles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v12, v13 := range in.MentionRoles {
				if v12 > 0 {
					out.RawByte(',')
				}
				if m, ok := v13.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v13.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v13))
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Attachments) != 0 {
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.Attachments {
				if v14 > 0 {
					out.RawByte(',')
				}
				if m, ok := v15.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v15.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v15))
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Embeds) != 0 {
		const prefix string = ",\"embeds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v16, v17 := range in.Embeds {
				if v16 > 0 {
					out.RawByte(',')
				}
				easyjson6601e8cdEncode(out, v17)
			}
			out.RawByte(']')
		}
	}
	if in.Timestamp != "" {
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Timestamp))
	}
	if in.EditedTimestamp != "" {
		const prefix string = ",\"edited_timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EditedTimestamp))
	}
	if in.Flags != 0 {
		const prefix string = ",\"flags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Flags))
	}
	if len(in.Components) != 0 {
		const prefix string = ",\"components\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v18, v19 := range in.Components {
				if v18 > 0 {
					out.RawByte(',')
				}
				if m, ok := v19.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v19.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v19))
				}
			}
			out.RawByte(']')
		}
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.ChannelID != "" {
		const prefix string = ",\"channel_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChannelID))
	}
	if true {
		const prefix string = ",\"author\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncode1(out, in.Author)
	}
	if in.Pinned {
		const prefix string = ",\"pinned\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Pinned))
	}
	if in.MentionEveryone {
		const prefix string = ",\"mention_everyone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.MentionEveryone))
	}
	if in.Tts {
		const prefix string = ",\"tts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Tts))
	}
	if len(in.Reactions) != 0 {
		const prefix string = ",\"reactions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.Reactions {
				if v20 > 0 {
					out.RawByte(',')
				}
				easyjson6601e8cdEncode2(out, v21)
			}
			out.RawByte(']')
		}
	}
	if in.ChannelName != "" {
		const prefix string = ",\"channel_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChannelName))
	}
	if in.IsBot {
		const prefix string = ",\"is_bot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsBot))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeWorkerPkgFetchhandlerD11(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeWorkerPkgFetchhandlerD11(l, v)
}
func easyjson6601e8cdDecode2(in *jlexer.Lexer, out *struct {
	Emoji struct {
		ID   string `json:"id,nocopy"`
		Name string `json:"name,nocopy"`
	} `json:"emoji"`
	Count        int `json:"count"`
	CountDetails struct {
		Burst  int `json:"burst"`
		Normal int `json:"normal"`
	} `json:"count_details"`
	BurstColors []interface{} `json:"burst_colors"`
	MeBurst     bool          `json:"me_burst"`
	BurstMe     bool          `json:"burst_me"`
	Me          bool          `json:"me"`
	BurstCount  int           `json:"burst_count"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "emoji":
			easyjson6601e8cdDecode3(in, &out.Emoji)
		case "count":
			out.Count = int(in.Int())
		case "count_details":
			easyjson6601e8cdDecode4(in, &out.CountDetails)
		case "burst_colors":
			if in.IsNull() {
				in.Skip()
				out.BurstColors = nil
			} else {
				in.Delim('[')
				if out.BurstColors == nil {
					if !in.IsDelim(']') {
						out.BurstColors = make([]interface{}, 0, 4)
					} else {
						out.BurstColors = []interface{}{}
					}
				} else {
					out.BurstColors = (out.BurstColors)[:0]
				}
				for !in.IsDelim(']') {
					var v22 interface{}
					if m, ok := v22.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v22.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v22 = in.Interface()
					}
					out.BurstColors = append(out.BurstColors, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "me_burst":
			out.MeBurst = bool(in.Bool())
		case "burst_me":
			out.BurstMe = bool(in.Bool())
		case "me":
			out.Me = bool(in.Bool())
		case "burst_count":
			out.BurstCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode2(out *jwriter.Writer, in struct {
	Emoji struct {
		ID   string `json:"id,nocopy"`
		Name string `json:"name,nocopy"`
	} `json:"emoji"`
	Count        int `json:"count"`
	CountDetails struct {
		Burst  int `json:"burst"`
		Normal int `json:"normal"`
	} `json:"count_details"`
	BurstColors []interface{} `json:"burst_colors"`
	MeBurst     bool          `json:"me_burst"`
	BurstMe     bool          `json:"burst_me"`
	Me          bool          `json:"me"`
	BurstCount  int           `json:"burst_count"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"emoji\":"
		first = false
		out.RawString(prefix[1:])
		easyjson6601e8cdEncode3(out, in.Emoji)
	}
	if in.Count != 0 {
		const prefix string = ",\"count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Count))
	}
	if true {
		const prefix string = ",\"count_details\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncode4(out, in.CountDetails)
	}
	if len(in.BurstColors) != 0 {
		const prefix string = ",\"burst_colors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v23, v24 := range in.BurstColors {
				if v23 > 0 {
					out.RawByte(',')
				}
				if m, ok := v24.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v24.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v24))
				}
			}
			out.RawByte(']')
		}
	}
	if in.MeBurst {
		const prefix string = ",\"me_burst\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.MeBurst))
	}
	if in.BurstMe {
		const prefix string = ",\"burst_me\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.BurstMe))
	}
	if in.Me {
		const prefix string = ",\"me\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Me))
	}
	if in.BurstCount != 0 {
		const prefix string = ",\"burst_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BurstCount))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecode4(in *jlexer.Lexer, out *struct {
	Burst  int `json:"burst"`
	Normal int `json:"normal"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "burst":
			out.Burst = int(in.Int())
		case "normal":
			out.Normal = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode4(out *jwriter.Writer, in struct {
	Burst  int `json:"burst"`
	Normal int `json:"normal"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Burst != 0 {
		const prefix string = ",\"burst\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Burst))
	}
	if in.Normal != 0 {
		const prefix string = ",\"normal\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Normal))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecode3(in *jlexer.Lexer, out *struct {
	ID   string `json:"id,nocopy"`
	Name string `json:"name,nocopy"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.UnsafeString())
		case "name":
			out.Name = string(in.UnsafeString())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode3(out *jwriter.Writer, in struct {
	ID   string `json:"id,nocopy"`
	Name string `json:"name,nocopy"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecode1(in *jlexer.Lexer, out *struct {
	ID                   string      `json:"id,nocopy"`
	Username             string      `json:"username,nocopy"`
	Avatar               string      `json:"avatar,nocopy"`
	Discriminator        string      `json:"discriminator,nocopy"`
	PublicFlags          int         `json:"public_flags"`
	Flags                int         `json:"flags"`
	Bot                  bool        `json:"bot"`
	Banner               interface{} `json:"banner"`
	AccentColor          interface{} `json:"accent_color"`
	AvatarDecorationData interface{} `json:"avatar_decoration_data"`
	BannerColor          interface{} `json:"banner_color"`
	Clan                 interface{} `json:"clan"`
	PrimaryGuild         interface{} `json:"primary_guild"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.UnsafeString())
		case "username":
			out.Username = string(in.UnsafeString())
		case "avatar":
			out.Avatar = string(in.UnsafeString())
		case "discriminator":
			out.Discriminator = string(in.UnsafeString())
		case "public_flags":
			out.PublicFlags = int(in.Int())
		case "flags":
			out.Flags = int(in.Int())
		case "bot":
			out.Bot = bool(in.Bool())
		case "banner":
			if m, ok := out.Banner.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Banner.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Banner = in.Interface()
			}
		case "accent_color":
			if m, ok := out.AccentColor.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.AccentColor.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.AccentColor = in.Interface()
			}
		case "avatar_decoration_data":
			if m, ok := out.AvatarDecorationData.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.AvatarDecorationData.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.AvatarDecorationData = in.Interface()
			}
		case "banner_color":
			if m, ok := out.BannerColor.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.BannerColor.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.BannerColor = in.Interface()
			}
		case "clan":
			if m, ok := out.Clan.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Clan.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Clan = in.Interface()
			}
		case "primary_guild":
			if m, ok := out.PrimaryGuild.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.PrimaryGuild.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.PrimaryGuild = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode1(out *jwriter.Writer, in struct {
	ID                   string      `json:"id,nocopy"`
	Username             string      `json:"username,nocopy"`
	Avatar               string      `json:"avatar,nocopy"`
	Discriminator        string      `json:"discriminator,nocopy"`
	PublicFlags          int         `json:"public_flags"`
	Flags                int         `json:"flags"`
	Bot                  bool        `json:"bot"`
	Banner               interface{} `json:"banner"`
	AccentColor          interface{} `json:"accent_color"`
	AvatarDecorationData interface{} `json:"avatar_decoration_data"`
	BannerColor          interface{} `json:"banner_color"`
	Clan                 interface{} `json:"clan"`
	PrimaryGuild         interface{} `json:"primary_guild"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Username != "" {
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	if in.Avatar != "" {
		const prefix string = ",\"avatar\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Avatar))
	}
	if in.Discriminator != "" {
		const prefix string = ",\"discriminator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Discriminator))
	}
	if in.PublicFlags != 0 {
		const prefix string = ",\"public_flags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PublicFlags))
	}
	if in.Flags != 0 {
		const prefix string = ",\"flags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Flags))
	}
	if in.Bot {
		const prefix string = ",\"bot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Bot))
	}
	if in.Banner != nil {
		const prefix string = ",\"banner\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Banner.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Banner.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Banner))
		}
	}
	if in.AccentColor != nil {
		const prefix string = ",\"accent_color\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.AccentColor.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.AccentColor.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.AccentColor))
		}
	}
	if in.AvatarDecorationData != nil {
		const prefix string = ",\"avatar_decoration_data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.AvatarDecorationData.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.AvatarDecorationData.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.AvatarDecorationData))
		}
	}
	if in.BannerColor != nil {
		const prefix string = ",\"banner_color\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.BannerColor.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.BannerColor.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.BannerColor))
		}
	}
	if in.Clan != nil {
		const prefix string = ",\"clan\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Clan.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Clan.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Clan))
		}
	}
	if in.PrimaryGuild != nil {
		const prefix string = ",\"primary_guild\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.PrimaryGuild.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.PrimaryGuild.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.PrimaryGuild))
		}
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecode(in *jlexer.Lexer, out *struct {
	Type        string `json:"type,nocopy"`
	Title       string `json:"title,nocopy"`
	Description string `json:"description,nocopy"`
	Color       int    `json:"color"`
	Image       struct {
		URL      string `json:"url,nocopy"`
		ProxyURL string `json:"proxy_url,nocopy"`
		Width    int    `json:"width"`
		Height   int    `json:"height"`
		Flags    int    `json:"flags"`
	} `json:"image"`
	Thumbnail struct {
		URL      string `json:"url,nocopy"`
		ProxyURL string `json:"proxy_url,nocopy"`
		Width    int    `json:"width"`
		Height   int    `json:"height"`
		Flags    int    `json:"flags"`
	} `json:"thumbnail"`
	Footer struct {
		Text string `json:"text,nocopy"`
	} `json:"footer"`
	ContentScanVersion int `json:"content_scan_version"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.UnsafeString())
		case "title":
			out.Title = string(in.UnsafeString())
		case "description":
			out.Description = string(in.UnsafeString())
		case "color":
			out.Color = int(in.Int())
		case "image":
			easyjson6601e8cdDecode5(in, &out.Image)
		case "thumbnail":
			easyjson6601e8cdDecode5(in, &out.Thumbnail)
		case "footer":
			easyjson6601e8cdDecode6(in, &out.Footer)
		case "content_scan_version":
			out.ContentScanVersion = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode(out *jwriter.Writer, in struct {
	Type        string `json:"type,nocopy"`
	Title       string `json:"title,nocopy"`
	Description string `json:"description,nocopy"`
	Color       int    `json:"color"`
	Image       struct {
		URL      string `json:"url,nocopy"`
		ProxyURL string `json:"proxy_url,nocopy"`
		Width    int    `json:"width"`
		Height   int    `json:"height"`
		Flags    int    `json:"flags"`
	} `json:"image"`
	Thumbnail struct {
		URL      string `json:"url,nocopy"`
		ProxyURL string `json:"proxy_url,nocopy"`
		Width    int    `json:"width"`
		Height   int    `json:"height"`
		Flags    int    `json:"flags"`
	} `json:"thumbnail"`
	Footer struct {
		Text string `json:"text,nocopy"`
	} `json:"footer"`
	ContentScanVersion int `json:"content_scan_version"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != "" {
		const prefix string = ",\"type\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Color != 0 {
		const prefix string = ",\"color\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Color))
	}
	if true {
		const prefix string = ",\"image\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncode5(out, in.Image)
	}
	if true {
		const prefix string = ",\"thumbnail\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncode5(out, in.Thumbnail)
	}
	if true {
		const prefix string = ",\"footer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncode6(out, in.Footer)
	}
	if in.ContentScanVersion != 0 {
		const prefix string = ",\"content_scan_version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ContentScanVersion))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecode6(in *jlexer.Lexer, out *struct {
	Text string `json:"text,nocopy"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.UnsafeString())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode6(out *jwriter.Writer, in struct {
	Text string `json:"text,nocopy"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Text != "" {
		const prefix string = ",\"text\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecode5(in *jlexer.Lexer, out *struct {
	URL      string `json:"url,nocopy"`
	ProxyURL string `json:"proxy_url,nocopy"`
	Width    int    `json:"width"`
	Height   int    `json:"height"`
	Flags    int    `json:"flags"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.UnsafeString())
		case "proxy_url":
			out.ProxyURL = string(in.UnsafeString())
		case "width":
			out.Width = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		case "flags":
			out.Flags = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode5(out *jwriter.Writer, in struct {
	URL      string `json:"url,nocopy"`
	ProxyURL string `json:"proxy_url,nocopy"`
	Width    int    `json:"width"`
	Height   int    `json:"height"`
	Flags    int    `json:"flags"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.URL != "" {
		const prefix string = ",\"url\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	if in.ProxyURL != "" {
		const prefix string = ",\"proxy_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProxyURL))
	}
	if in.Width != 0 {
		const prefix string = ",\"width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Width))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Height))
	}
	if in.Flags != 0 {
		const prefix string = ",\"flags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Flags))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeWorkerPkgFetchhandlerD12(in *jlexer.Lexer, out *GenericMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		if !in.IsDelim('}') {
			*out = make(GenericMap)
		} else {
			*out = nil
		}
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v25 interface{}
			if m, ok := v25.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := v25.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				v25 = in.Interface()
			}
			(*out)[key] = v25
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeWorkerPkgFetchhandlerD12(out *jwriter.Writer, in GenericMap) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v26First := true
		for v26Name, v26Value := range in {
			if v26First {
				v26First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v26Name))
			out.RawByte(':')
			if m, ok := v26Value.(easyjson.Marshaler); ok {
				m.MarshalEasyJSON(out)
			} else if m, ok := v26Value.(json.Marshaler); ok {
				out.Raw(m.MarshalJSON())
			} else {
				out.Raw(json.Marshal(v26Value))
			}
		}
		out.RawByte('}')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GenericMap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeWorkerPkgFetchhandlerD12(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GenericMap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeWorkerPkgFetchhandlerD12(l, v)
}
